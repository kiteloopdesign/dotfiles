# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

#----------------------------------------------------------------------------------------------------
# colors
#----------------------------------------------------------------------------------------------------
DARKGRAY='\e[1;30m'
LIGHTRED='\e[1;31m'
GREEN='\e[32m'
YELLOW='\e[1;33m'
LIGHTBLUE='\e[1;34m'
NC='\e[m'

# needed so ls --color shows colors depending on file extension
eval $(dircolors -b)

#----------------------------------------------------------------------------------------------------
# Path
#----------------------------------------------------------------------------------------------------
export PATH=$HOME/.local/bin:$PATH
export PATH=${HOME}/bin:$PATH
# export PATH=$HOME/bin:$PATH

# Needed by rustup (rust), in turn needed from atuin
export PATH="$HOME/.cargo/bin:$PATH"

export PATH=/usr/local/texlive/2024/bin/x86_64-linux:$PATH
# export PATH="$PATH:$HOME/esp/xtensa-lx106-elf/bin"
# export IDF_PATH="$HOME/esp/ESP8266_RTOS_SDK"

export LEDGER_FILE=~/personal/hledger/all.journal

#----------------------------------------------------------------------------------------------------
# sh options: `shopt -p` lists all already set
#----------------------------------------------------------------------------------------------------
set bell-style none             #no bell
shopt -s autocd                 #cd dir with name
# CTRL-s hangs the emulator, disable
stty -ixon

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.  shopt -s checkwinsize # If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

#----------------------------------------------------------------------------------------------------
# Env variables: TODO: these should go to bash_profile?
#----------------------------------------------------------------------------------------------------
# Other gloval variables
export EDITOR=/usr/bin/vim
# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# export MANPATH=${HOME}/.local/texlive/2022/texmf-dist/doc/man:$MANPATH
export MANPATH=/usr/local/texlive/2024/texmf-dist/doc/man:$MANPATH

# Use "bat" for man pages
# TODO: check 1st whether bat is installed!
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
# This is needed to properly show colors
export MANROFFOPT="-c"

#----------------------------------------------------------------------------------------------------
# History
#----------------------------------------------------------------------------------------------------

# HISTFILE=$HOME/.bhistfile
HISTSIZE=90000
HISTFILESIZE=90000

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

export HISTIGNORE="&:bg:fg:ll:h:l:ls:cd:sa:ea:gs:gp:pwd:eg:poweroff"


# Change the format of the history output: does not print date, instead 
# print carriage return "\r" and clear line (ANSI K code)
# HISTTIMEFORMAT=$'\r\e[K'
# Also we could use this alias ...
# HISTTIMEFORMAT=$'\r\e[K' history

# export HISTTIMEFORMAT='%F %T '
export HISTTIMEFORMAT="$(echo -e ${GREEN})[%d/%m/%y %H:%M]$(echo -e ${NC}) "


# append to the history file, don't overwrite it
shopt -s histappend

# force multi-line commands to fit on one
shopt -s cmdhist

# TODO: esto creo que petara el liquidprompt
# # Store history immediately. By default, Bash only records a session to the
# # .bash_history file on disk when the session terminates. This means that if you
# # crash or your session terminates improperly, you lose the history up to that
# # point. You can fix this by recording each line of history as you issue it,
# # through the $PROMPT_COMMAND variable:
# PROMPT_COMMAND='history -a'

#----------------------------------------------------------------------------------------------------
# Custom less
#----------------------------------------------------------------------------------------------------
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# See below for explanation
export LESS="-SXIFRs"

# -S: do not wrap lines, side scroll with left/right arrow keys
# -X: leave contents on screen when less exits
# -I: ignore case when searching with / or ?
# -F: quit immediately when the entire file fits in one screen
# -R: enable colored output
# -s: squeeze blank lines into a single blank line
# Coloured LESS
# export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
# export LESS_TERMCAP_md=$(printf '\e[01;32m') # enter double-bright mode – (was 32, green)
# export LESS_TERMCAP_me=$(printf '\e[0m') # turn off all appearance modes (mb, md, so, us)
# export LESS_TERMCAP_se=$(printf '\e[0m') # leave standout mode
# export LESS_TERMCAP_so=$(printf '\e[01;41m') # enter standout mode – red (was 33, yellow)
# export LESS_TERMCAP_ue=$(printf '\e[0m') # leave underline mode
# export LESS_TERMCAP_us=$(printf '\e[04;36m') # enter underline mode – cyan

#----------------------------------------------------------------------------------------------------
# Custom bindings (general ones done in profile)
# TODO: working, play with this !
#----------------------------------------------------------------------------------------------------
# Custom bindings to commands ! Eg Ctrl-Y run "ls"
# bind -x '"\C-y":"ls"'
# If it is not working, try deleting the binding first. Eg Ctrl-o does
# not seem to work by default. "ev" is in this case an alias ! edit vim
# bind -r "\C-o"
# bind -x '"\C-o":"ev"'

# # Map a keystroke to a template, useful when learning
# # a language and need to create quick templates. Make this 
# # function take args and so make it for several languages
# create-template (){
# cat << EOF > template.sh
# Hello
# World
# !
# EOF
# echo "template.sh created"
# }
# # Work with both ...
# bind -x '"\C-e":"create-template"'

#----------------------------------------------------------------------------------------------------
# Use bash-completion, if available
#----------------------------------------------------------------------------------------------------
[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \
source /usr/share/bash-completion/bash_completion

#----------------------------------------------------------------------------------------------------
# Load alias
#----------------------------------------------------------------------------------------------------
# Alias definitions.
if [ -f ~/.alias ]; then
  source ~/.alias
fi

#----------------------------------------------------------------------------------------------------
# programmable completion features
#----------------------------------------------------------------------------------------------------
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#----------------------------------------------------------------------------------------------------
# Prompt: Using tool-solution prompt. See below
#----------------------------------------------------------------------------------------------------
# # If this is an xterm set the title to user@host:dir
# case "$TERM" in
# xterm*|rxvt*)
#     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#     ;;
# *)
#     ;;
# esac

#----------------------------------------------------------------------------------------------------
# Atuin: shit as of 26/02/23 ...
#----------------------------------------------------------------------------------------------------
# NOTE: bash-preexec was installed by Atuin. It kind of messes with liquidprompt, and so
# instructions on liquidprompt recommend to source preexec b/f it. However THIS contradicts
# preexec instructions, which say it should go last 
# [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
# moving this to the end of bashrc
# eval "$(atuin init bash)"
# TODO: there's so many other options, but anyone seems to be able to do it all: plug into fzf ctrl-r,
# open source, dont be a fancy go/rust project if possible, multi host operation, be easy enough to understand it
# in case it is not supported anymore... The ones I like are :
# https://github.com/thenewwazoo/bash-history-sqlite # SUPER EASY TO FOLLOW (no remote server thou) -> EMPIEZA SETEANDO ESTA ...
# https://github.com/barabo/advanced-shell-history
# https://github.com/slim-bean/loki-shell (MAKES USE OF GRAFANA AND FZF, THE WAY TO GO, COMPLEX) --> CREO Q ESTA ES BUENA, UP TO DATE ...
# https://github.com/rcaloras/bashhub-client (can it use fzf? uses client-server. Closed source!)

#----------------------------------------------------------------------------------------------------
# Liquidprompt
#----------------------------------------------------------------------------------------------------

# Only load Liquidprompt in interactive shells, not from a script or from scp
[[ $- = *i* ]] && source ~/.liquidprompt/liquidprompt

source ~/.liquidprompt/themes/powerline/powerline.theme
lp_theme powerline

# If slow: `LP_DEBUG_TIME=1 ; lp_activate` to enable printing the runtime before
# every prompt. This lets you see specific runtimes, and will let you observe
# what changes improve the time.

# Next, `declare -p | grep " LP_ENABLE"` which will print every config option
# Keep disabling features until you find what makes a large change to your runtime
# eg `LP_ENABLE_TEMP=0` -> This one did the trick!

# # add time, jobs, load and battery
# LP_PS1="${LP_PS1_PREFIX}${LP_TIME}${LP_BATT}${LP_LOAD}${LP_TEMP}${LP_JOBS}"
# # add user, host and permissions colon
# LP_PS1+="${LP_BRACKET_OPEN}${LP_USER}${LP_HOST}${LP_PERM}"
# LP_PS1+="${LP_PWD}${LP_BRACKET_CLOSE}${LP_SCLS}${LP_VENV}${LP_RUBY_VENV}${LP_TFSPACE}${LP_PROXY}"
# # Add VCS infos
# LP_PS1+="${LP_VCS}"
# # add return code and prompt mark
# LP_PS1+="${LP_RUNTIME}${LP_ERR}${LP_MARK_PREFIX}${LP_COLOR_MARK}${LP_MARK}${LP_PS1_POSTFIX}"
# # Get the current prompt on the fly and make it a title
# _lp_formatted_title "$LP_PS1"

##----------------------------------------------------------------------------------------------------
## Powerline: SIMPLE and compatible with csh !
## pip install powerline-shell
##----------------------------------------------------------------------------------------------------
#function _update_ps1() {
#    PS1=$(powerline-shell $?)
#}
#if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
#    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
#fi

##----------------------------------------------------------------------------------------------------
## Powerline : TOO FREAKING COMPLEX in SETTING UP. BIG FUCK YOU
## Install it via system : apt get powerline
## Install it with: pip install powerline-status
## In Fedora: Copy files from /etc/xdg/powerline into ~/.config/powerline
##----------------------------------------------------------------------------------------------------
## Run powerline-daemon --replace to reload configuration
#if [ -f $(which powerline-daemon) ]; then
#  powerline-daemon -q
#  POWERLINE_BASH_CONTINUATION=1
#  POWERLINE_BASH_SELECT=1
#  source /usr/share/powerline/bash/powerline.sh
#fi


#----------------------------------------------------------------------------------------------------
# FZF
#----------------------------------------------------------------------------------------------------
DIST=$(grep -Po "(?<=^ID=).+" /etc/os-release | sed 's/"//g')
if [ "${DIST}" = "fedora" ] ; then
  [ -f /usr/share/fzf/shell/key-bindings.bash ] && source /usr/share/fzf/shell/key-bindings.bash
elif [ "${DIST}" = "ubuntu" ] ; then
  [ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash
fi

# When selecting files with fzf, we show file content with syntax highlighting,
# or without highlighting if it's not a source file. If the file is a directory,
# we use tree to show the directory's contents.
# We only load the first 200 lines of the file which enables fast previews
# of large text files.
# Requires highlight and tree: pacman -S highlight tree

# Modify default options for fzf
export FZF_DEFAULT_OPTS='--height 50% --border'

# CTRL-T - Paste the selected files and directories onto the command line
# Set FZF_CTRL_T_COMMAND to override the default command
# Set FZF_CTRL_T_OPTS to pass additional options

# CTRL-R - Paste the selected command from history onto the command line
# If you want to see the commands in chronological order, press CTRL-R again which toggles sorting by relevance
# Set FZF_CTRL_R_OPTS to pass additional options

# ALT-C - cd into the selected directory
# Set FZF_ALT_C_COMMAND to override the default command
# Set FZF_ALT_C_OPTS to pass additional options

# FD_OPTIONS="--hidden --follow --exclude .git --exclude node_modules"
# export FZF_DEFAULT_OPTS=

# Use git-ls-files inside git repo, otherwise fd
# export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard || fd --type f --type l $FD_OPTIONS"
# export FZF_CTRL_T_COMMAND="fd $FD_OPTIONS"
# export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"

# # Atuin
# [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
# eval "$(atuin init bash)"
