set bell-style none

# Use Vi, not Emacs, style editing
set editing-mode vi

# https://wiki.archlinux.org/title/readline#Mode_indicator_in_prompt
# mode indicator in prompt
# TODO: 
set show-mode-in-prompt on

# TODO: tried "echo" on shell and not working ... ?
# To get normal blinking underline, use:
# echo -e '\033[?2c'
# To get blinking block, use:
# echo -e '\033[?6c'
# To get red non-blinking block, use:
# echo -e '\033[?17;0;64c'

#set vi-ins-mode-string \1\e[?0c\2
#set vi-cmd-mode-string \1\e[?8c\2

# TODO: this works but kind of breaks vi too
# el show-mode-in-prompt tb deberia funcionar pero no lo hace ... no se pq ... aunque es
# cierto que una vez si lo vi funcionar ... podria ser por el shell desde el cliente de ssh
# (sospecho esto pq he visto q al volver al cliente, el shell esta petado). Quiza
# tb depende de como ahces ssh : ssh -Y vs ssh , etc. Experimentar con esto ...
#$if term=linux
#   set vi-ins-mode-string \1\e[?0c\2
#   set vi-cmd-mode-string \1\e[?8c\2
#$else
#   set vi-ins-mode-string \1\e[6 q\2
#   set vi-cmd-mode-string \1\e[2 q\2
#$endif


###########################################################
# cycle thru completions ala zsh compinit menu
###########################################################

# Ignore case: "cd e..." = "cd E..."
# set completion-ignore-case on

# First press TAB it completes the common prefix and also shows the list of
# possible completions. Subsequent TAB presses cycle through them
TAB:menu-complete
# Show all completions as soon as I press tab, even if there's more than one
set show-all-if-ambiguous on
# on menu-complete, first display the common prefix, then cycle through the
# options when hitting TAB
set menu-complete-display-prefix on
# colours the first letter that we are completing on and the type of file
set colored-completion-prefix on
set colored-stats on
# Ignore case
# set completion-ignore-case on

# This will suffix each returned file completion with a character denoting its
# type, in a similar way to ls(1) with -F or --classify.
# set visible-stats on
# This turns off the use of the internal pager when returning long completion lists.
# set page-completions off


###########################################################
# Keymaps for when we're in command mode (e.g., after hitting ESC)
set keymap vi-command
# these are for vi-command mode
Control-l: clear-screen
set keymap vi-insert
# # these are for vi-insert mode
Control-l: clear-screen 

# Insert the arguments from the last command
#"p": "i !!*\r"

# Expande el comando anterior! eg: escribes "!!", Alt+Shift+6 -> se expande al cmd anterior
# Util para modificar cuando te has equivocado, o quieres insertar comando anterior en medio de otro
# "\e" = Alt
# "^" = Shift+6
"\e^": history-expand-line

# When hitting option-up/option-down, cycle through the previous commands
# which start with the prefix you've entered, rather than just cycling through
# the last entered commands.
# Feel free to bind to whatever you want. Delete the first '\e' in the keymap
# to set plain up/down to do a history search by default.
#"\e\e[A": history-search-backward
#"\e\e[B": history-search-forward
"": history-search-backward
"": history-search-forward

# TODO: to test... use to copy from current line with no mouse
# "": '\C-e\C-ucat <<"EOF" | tr -d "\\n" | xsel -ib\n\C-y\nEOF\n'
# "": '\C-e\C-ucat <<"EOF" | tr -d "\\n" | xclip -se c\n\C-y\nEOF\n'

# Pressing tab will list all completions & select the first one. Pressing it 
# again will cycle through available completions.
#TAB: menu-complete
# Shift-TAB cycles completions backward
#"\e[Z": menu-complete-backward

# Option-up/option-down should also apply to insert mode
#"\e\e[A": history-search-backward
#"\e\e[B": history-search-forward

# Needed because binding 'p' in command mode above wipes its insert mode
# function, too. This fixes that, and will insert 'p' when you type 'p'.
#"p": self-insert


# Expand "*". Funciona en vi-mode por defecto. 
# escribe comando, eg "ls *" -> Esc+* -> sale de insert, expande y vuelve a insert mode
# Este otro, que funciona si no se esta en modo vi, hace falta hacerlo explicito en vi mode
# Control-x*: glob-expand-word # TODO: control-x es valido, pero no se como anyadir el "*".. 
# usando old-school notation
"*": glob-expand-word
