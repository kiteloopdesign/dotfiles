################################################################################
# CTRL-s hangs the emulator, disable
#
################################################################################
stty -ixon

################################################################################
# PATH
#
################################################################################
export PATH=/usr/local/texlive/2020/bin/x86_64-linux:$PATH
# PATH=/home/kitesutra/miniconda2/bin:$PATH
export PATH=/home/kitesutra/.local/bin:$PATH
export PATH=/home/kitesutra/bin:$PATH

export EDITOR=/usr/bin/vim

# This is so vim uses the anaconda path as opposed to the python installed on system
# this is needed for stuff like autocomplete can work 
# export PYTHONPATH="$PYTHONPATH:${HOME}/miniconda3/lib/python3.6/site-packages"

# Required to activate conda env
# source /home/kitesutra/miniconda3/etc/profile.d/conda.sh

################################################################################
# Environment. TODO : These should go to .zshenv or .zprofile?
################################################################################

# Modify default options for fzf
export FZF_DEFAULT_OPTS='--height 50% --border'

# CTRL-T - Paste the selected files and directories onto the command line
# Set FZF_CTRL_T_COMMAND to override the default command
# Set FZF_CTRL_T_OPTS to pass additional options

# CTRL-R - Paste the selected command from history onto the command line
# If you want to see the commands in chronological order, press CTRL-R again which toggles sorting by relevance
# Set FZF_CTRL_R_OPTS to pass additional options

# ALT-C - cd into the selected directory
# Set FZF_ALT_C_COMMAND to override the default command
# Set FZF_ALT_C_OPTS to pass additional options

################################################################################
#
# History
#
################################################################################
# Appends every command to the history file once it is executed
setopt inc_append_history
# Reloads the history whenever you use it
setopt share_history
#save only one command if two same commands are entered in a row
setopt hist_ignore_dups
#add timestamp for each entry
setopt extended_history   
# remove duplicates when running out of space
setopt hist_expire_dups_first

HISTFILE=$HOME/.zhistfile
export HISTSIZE=10000
export SAVEHIST=10000


################################################################################
#
# Folder history
#
################################################################################
# NOTE : It might be needed to create the zsh dir!
# cd -<NUM> to go back to a visited folder. Use autocompletion after the dash

DIRSTACKFILE="$HOME/.cache/zsh/dirs"
if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  [[ -d $dirstack[1] ]] && cd $dirstack[1]
fi
chpwd() {
  print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
}

DIRSTACKSIZE=20

setopt AUTO_PUSHD PUSHD_SILENT PUSHD_TO_HOME

## Remove duplicate entries
setopt PUSHD_IGNORE_DUPS

## This reverts the +/- operators.
setopt PUSHD_MINUS

################################################################################
#
# ZLE (Equivalent to inputrc in bash)
#
################################################################################

# vim mode
bindkey -v

autoload -z edit-command-line

zle -N down-line-or-beginning-search
zle -N edit-command-line

# Open line in vim
bindkey "^X^E" edit-command-line

# Better searching in command mode
# bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-backward
# leave default old friend ctrl-r
bindkey '^r' history-incremental-search-backward

# Beginning search with arrow keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "" up-line-or-beginning-search # Up
bindkey "" down-line-or-beginning-search # Down
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down


# In command mode, use vim up/down to search through history! BOOM !!
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search

# Use vim cli mode
# bindkey '^P' up-history
# bindkey '^N' down-history

# # backspace and ^h working even after returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# Needed to paste from x clipboard
x-paste() {
PASTE=$(xclip -selection clipboard -o)
    LBUFFER="$LBUFFER${RBUFFER:0:1}"
    RBUFFER="$PASTE${RBUFFER:1:${#RBUFFER}}"
}
zle -N x-paste
bindkey -M vicmd "p" x-paste

# # ctrl-w removed word backwards
# bindkey '^w' backward-kill-word
#
# bindkey '^a' beginning-of-line
# # bindkey '^a' vi-beginning-of-line
# bindkey '^e' end-of-line
# # bindkey '^e' vi-end-of-line

################################################################################
#
# Other
#
################################################################################

# powerline
if [ -f $(which powerline-daemon) ]; then
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  source /usr/share/powerline/zsh/powerline.zsh
fi

# adjust delay when switching modes to .1 seconds
export KEYTIMEOUT=1

# ZMV allows to mass-rename, see alias for commands
autoload zmv

################################################################################
#
# Completion
#
################################################################################
# zstyle :compinstall filename '$HOME/.zshrc'
autoload -Uz compinit
compinit

# zstyle ':completion:*' auto-description 'specify: %d'
# # zstyle ':completion:*' completer _expand _complete _correct _approximate
# zstyle ':completion:*' completer _expand _complete 
# zstyle ':completion:*' format 'Completing %d'
# zstyle ':completion:*' group-name ''
# zstyle ':completion:*' menu select=2 eval "$(dircolors -b)"
# zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*' list-colors ''
# zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
# zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' menu select=long
# zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
# zstyle ':completion:*' use-compctl false
# zstyle ':completion:*' verbose true
# zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
# zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
# Do menu-driven completion.
zstyle ':completion:*' menu select

# Color completion for some things.
# http://linuxshellaccount.blogspot.com/2008/12/color-completion-using-zsh-modules-on.html
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# formatting and messages
# http://www.masterzen.fr/2009/04/19/in-love-with-zsh-part-one/
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format "$fg[yellow]%B--- %d%b"
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format "$fg[red]No matches for:$reset_color %d"
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# Completers for my own scripts
zstyle ':completion:*:*:sstrans*:*' file-patterns '*.(lst|clst)'
zstyle ':completion:*:*:ssnorm*:*' file-patterns '*.tsv'

# End of lines added by compinstall
source $HOME/.alias

# Sleep added to avoid warning issued by xmodmap because some keys are pressed
sleep 0.1
# xmodmap $HOME/.Xmodmap

# This is the fuzzy finder
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Syntax highlighting in shell
# This should always be the last one being sourced
# source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
